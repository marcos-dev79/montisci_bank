// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: account_users.sql

package database

import (
	"context"
	"time"
)

const createAccountUser = `-- name: CreateAccountUser :one
INSERT INTO account_users (
  id, account_id, user_id, created_at, updated_at
  ) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, account_id, user_id, created_at, updated_at
`

type CreateAccountUserParams struct {
	ID        int64
	AccountID int64
	UserID    int64
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateAccountUser(ctx context.Context, arg CreateAccountUserParams) (AccountUser, error) {
	row := q.db.QueryRowContext(ctx, createAccountUser,
		arg.ID,
		arg.AccountID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i AccountUser
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccountUser = `-- name: DeleteAccountUser :exec
DELETE FROM account_users
WHERE user_id = $1
`

func (q *Queries) DeleteAccountUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountUser, userID)
	return err
}

const getAccountUsers = `-- name: GetAccountUsers :one
SELECT id, account_id, user_id, created_at, updated_at FROM account_users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetAccountUsers(ctx context.Context, userID int64) (AccountUser, error) {
	row := q.db.QueryRowContext(ctx, getAccountUsers, userID)
	var i AccountUser
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountUsersID = `-- name: GetAccountUsersID :one
SELECT id, account_id, user_id, created_at, updated_at FROM account_users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountUsersID(ctx context.Context, id int64) (AccountUser, error) {
	row := q.db.QueryRowContext(ctx, getAccountUsersID, id)
	var i AccountUser
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccountUsers = `-- name: ListAccountUsers :many
SELECT id, account_id, user_id, created_at, updated_at FROM account_users
ORDER BY created_at
`

func (q *Queries) ListAccountUsers(ctx context.Context) ([]AccountUser, error) {
	rows, err := q.db.QueryContext(ctx, listAccountUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountUser
	for rows.Next() {
		var i AccountUser
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: account_transactions.sql

package database

import (
	"context"
	"time"
)

const createAccountTransactions = `-- name: CreateAccountTransactions :one
INSERT INTO account_transactions (
  id, account_id, amount, created_at, updated_at
  ) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, account_id, amount, created_at, updated_at
`

type CreateAccountTransactionsParams struct {
	ID        int64
	AccountID int64
	Amount    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateAccountTransactions(ctx context.Context, arg CreateAccountTransactionsParams) (AccountTransaction, error) {
	row := q.db.QueryRowContext(ctx, createAccountTransactions,
		arg.ID,
		arg.AccountID,
		arg.Amount,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i AccountTransaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccountTransactions = `-- name: DeleteAccountTransactions :exec
DELETE FROM account_transactions
WHERE id = $1
`

func (q *Queries) DeleteAccountTransactions(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountTransactions, id)
	return err
}

const getAccountTransactions = `-- name: GetAccountTransactions :one
SELECT id, account_id, amount, created_at, updated_at FROM account_transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountTransactions(ctx context.Context, id int64) (AccountTransaction, error) {
	row := q.db.QueryRowContext(ctx, getAccountTransactions, id)
	var i AccountTransaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccountTransactions = `-- name: ListAccountTransactions :many
SELECT id, account_id, amount, created_at, updated_at FROM account_transactions
ORDER BY id
`

func (q *Queries) ListAccountTransactions(ctx context.Context) ([]AccountTransaction, error) {
	rows, err := q.db.QueryContext(ctx, listAccountTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountTransaction
	for rows.Next() {
		var i AccountTransaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

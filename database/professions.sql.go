// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: professions.sql

package database

import (
	"context"
	"time"
)

const createProfession = `-- name: CreateProfession :one
INSERT INTO professions (
  id, name, created_at, updated_at
  ) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, created_at, updated_at
`

type CreateProfessionParams struct {
	ID        int64
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateProfession(ctx context.Context, arg CreateProfessionParams) (Profession, error) {
	row := q.db.QueryRowContext(ctx, createProfession,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Profession
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProfession = `-- name: DeleteProfession :exec
DELETE FROM professions
WHERE id = $1
`

func (q *Queries) DeleteProfession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProfession, id)
	return err
}

const getProfession = `-- name: GetProfession :one
SELECT id, name, created_at, updated_at FROM professions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProfession(ctx context.Context, id int64) (Profession, error) {
	row := q.db.QueryRowContext(ctx, getProfession, id)
	var i Profession
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProfessions = `-- name: ListProfessions :many
SELECT id, name, created_at, updated_at FROM professions
ORDER BY name
`

func (q *Queries) ListProfessions(ctx context.Context) ([]Profession, error) {
	rows, err := q.db.QueryContext(ctx, listProfessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profession
	for rows.Next() {
		var i Profession
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

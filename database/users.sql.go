// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, name, bio, birthdate, email, last_login, created_at, updated_at, profession_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, name, bio, birthdate, email, last_login, created_at, updated_at, profession_id
`

type CreateUserParams struct {
	ID           int64
	Name         string
	Bio          sql.NullString
	Birthdate    time.Time
	Email        string
	LastLogin    time.Time
	CreatedAt    time.Time
	UpdatedAt    time.Time
	ProfessionID int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Bio,
		arg.Birthdate,
		arg.Email,
		arg.LastLogin,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ProfessionID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Birthdate,
		&i.Email,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfessionID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, bio, birthdate, email, last_login, created_at, updated_at, profession_id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Birthdate,
		&i.Email,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfessionID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, bio, birthdate, email, last_login, created_at, updated_at, profession_id FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.Birthdate,
			&i.Email,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProfessionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
